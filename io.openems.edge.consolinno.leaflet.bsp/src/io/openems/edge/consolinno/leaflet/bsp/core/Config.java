package io.openems.edge.consolinno.leaflet.bsp.core;

import org.osgi.service.metatype.annotations.AttributeDefinition;
import org.osgi.service.metatype.annotations.ObjectClassDefinition;

@ObjectClassDefinition(name = "Consolinno Leaflet BSP Core", description = "Consolinno Board Support Package Core for Modbus LeafletModules.")
public @interface Config {

    @AttributeDefinition(name = "Component-ID", description = "Unique ID of this Component")
    String id() default "bsp0";

    @AttributeDefinition(name = "Alias", description = "Human-readable name of this Component; defaults to Component-ID")
    String alias() default "Consolinno Leaflet BSP Core";

    @AttributeDefinition(name = "Is enabled?", description = "Is this Component enabled?")
    boolean enabled() default true;

    @AttributeDefinition(name = "Backend Component-ID", description = "Component-ID of the backend to surveillance and use for LED color")
    String backendComponentId() default "ctrlBackend0";

    @AttributeDefinition(name = "Modbus-ID", description = "ID of Modbus bridge.")
    String modbus_id() default "modbus0";

    @AttributeDefinition(name = "ModbusUnitId", description = "Unique Id for the ModbusUnit.")
    int modbusUnitId() default 1;

    @AttributeDefinition(name = "Runs remotely?", description = "Set to true if you connect to a remote leaflet?")
    boolean runningOnDifferentLeaflet() default false;

    @AttributeDefinition(name = "Source", description = "Path of the SourceFile where the Modbus-registerMap is stored.")
    String source() default "/usr/include/leafletbs/modbusregmap.csv";

    @AttributeDefinition(name = "Modbus target filter", description = "This is auto-generated by 'Modbus-ID'.")
    String Modbus_target() default "(enabled=true)";

    String webconsole_configurationFactory_nameHint() default "Consolinno Leaflet BSP Core {id}";
}
